/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import domain.Client;
import domain.Gym;
import domain.Trainer;
import domain.WorkoutItem;
import domain.WorkoutRecord;
import enums.Gender;
import form.client.AddClientDialog;
import form.trainer.TrainerDetailsForm;
import form.workoutrecord.AddWorkoutRecordDialog;
import java.awt.GraphicsEnvironment;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import logic.ClientController;
import model.ClientTableModel;
import model.ClientWorkoutRecordTableModel;

/**
 *
 * @author pc
 */
public class MainForm extends javax.swing.JFrame {

    private LinkedList<Gym> gymList;
    private LinkedList<Client> clientList;
    private Trainer trainer;
    private LinkedList<WorkoutRecord> recordsOfSelectedClient;

    public MainForm(Trainer trener) {
        initComponents();
        this.trainer = trener;
        resizeFrame();
        setWindowListener();
        setResizable(false);
        fillGymComboBox(cmbGymSearchClient);
        tableWorkoutRecords.setModel(new ClientWorkoutRecordTableModel());
        tblClients.setModel(new ClientTableModel());
        fillClientTable();
        setClientTableListSelectionListener();

    }

    public Trainer getTrainer() {
        return trainer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableWorkoutRecords = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        checkBoxOnlyMyRecords = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnDeleteRecord = new javax.swing.JButton();
        btnAddRecord = new javax.swing.JButton();
        btnRecordDetails = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbGymSearchClient = new javax.swing.JComboBox<>();
        btnSearchClients = new javax.swing.JButton();
        btnResetClientSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClients = new javax.swing.JTable();
        btnClientDetails = new javax.swing.JButton();
        btnDeleteClient = new javax.swing.JButton();
        btnAddClient = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        AddClientMenuItem = new javax.swing.JMenuItem();
        MenuAccount = new javax.swing.JMenu();
        AccountDetailsMenuItem = new javax.swing.JMenuItem();
        MySertificatesMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableWorkoutRecords.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tableWorkoutRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableWorkoutRecords);

        checkBoxOnlyMyRecords.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        checkBoxOnlyMyRecords.setText("Treninzi odrzani samo kod vas");
        checkBoxOnlyMyRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxOnlyMyRecordsActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("Odrzani treninzi:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("EVIDENCIJA TRENINGA");

        btnDeleteRecord.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnDeleteRecord.setText("Obrisi trening");
        btnDeleteRecord.setMaximumSize(new java.awt.Dimension(150, 30));
        btnDeleteRecord.setMinimumSize(new java.awt.Dimension(150, 30));
        btnDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecordActionPerformed(evt);
            }
        });

        btnAddRecord.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnAddRecord.setText("Unesi trening");
        btnAddRecord.setMaximumSize(new java.awt.Dimension(150, 30));
        btnAddRecord.setMinimumSize(new java.awt.Dimension(150, 30));
        btnAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRecordActionPerformed(evt);
            }
        });

        btnRecordDetails.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnRecordDetails.setText("Detalji o treningu");
        btnRecordDetails.setMaximumSize(new java.awt.Dimension(150, 30));
        btnRecordDetails.setMinimumSize(new java.awt.Dimension(150, 30));
        btnRecordDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordDetailsActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setText("Ime");

        jLabel7.setText("Prezime");

        buttonGroup1.add(rbMale);
        rbMale.setText("Musko");
        rbMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMaleActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbFemale);
        rbFemale.setText("Zensko");

        jLabel8.setText("Pol");

        jLabel9.setText("Teretana");

        cmbGymSearchClient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSearchClients.setText("Pretrazi");
        btnSearchClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchClientsActionPerformed(evt);
            }
        });

        btnResetClientSearch.setText("Reset");
        btnResetClientSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetClientSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSearchClients, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnResetClientSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rbMale, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtName)
                    .addComponent(txtLastName)
                    .addComponent(cmbGymSearchClient, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMale)
                    .addComponent(rbFemale)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmbGymSearchClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchClients)
                    .addComponent(btnResetClientSearch))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        tblClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblClients);

        btnClientDetails.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnClientDetails.setText("Detalji o klijentu");
        btnClientDetails.setMaximumSize(new java.awt.Dimension(150, 30));
        btnClientDetails.setMinimumSize(new java.awt.Dimension(150, 30));
        btnClientDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientDetailsActionPerformed(evt);
            }
        });

        btnDeleteClient.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnDeleteClient.setText("Obrisi klijenta");
        btnDeleteClient.setMaximumSize(new java.awt.Dimension(150, 30));
        btnDeleteClient.setMinimumSize(new java.awt.Dimension(150, 30));
        btnDeleteClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteClientActionPerformed(evt);
            }
        });

        btnAddClient.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnAddClient.setText("Dodaj klijenta");
        btnAddClient.setMaximumSize(new java.awt.Dimension(150, 30));
        btnAddClient.setMinimumSize(new java.awt.Dimension(150, 30));
        btnAddClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddClientActionPerformed(evt);
            }
        });

        jMenuBar1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        jMenu1.setText("Klijent");
        jMenu1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        AddClientMenuItem.setText("Dodaj");
        AddClientMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddClientMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(AddClientMenuItem);

        jMenuBar1.add(jMenu1);

        MenuAccount.setText("Nalog");
        MenuAccount.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        AccountDetailsMenuItem.setText("Detalji");
        AccountDetailsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccountDetailsMenuItemActionPerformed(evt);
            }
        });
        MenuAccount.add(AccountDetailsMenuItem);

        MySertificatesMenuItem.setText("Moji sertifikati");
        MenuAccount.add(MySertificatesMenuItem);

        jMenuBar1.add(MenuAccount);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 1806, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddClient, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnClientDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxOnlyMyRecords)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRecordDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRecordDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClientDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteClient, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddClient, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxOnlyMyRecords))
                .addContainerGap(468, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AccountDetailsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccountDetailsMenuItemActionPerformed
        TrainerDetailsForm tdf = new TrainerDetailsForm(this, true, trainer);
        tdf.setVisible(true);
        tdf.setLocationRelativeTo(null);
    }//GEN-LAST:event_AccountDetailsMenuItemActionPerformed

    private void AddClientMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddClientMenuItemActionPerformed
        AddClientDialog acd = new AddClientDialog(this, true, null);
        acd.setVisible(true);
        acd.setLocationRelativeTo(null);
        btnSearchClients.doClick();
    }//GEN-LAST:event_AddClientMenuItemActionPerformed
    private void checkBoxOnlyMyRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxOnlyMyRecordsActionPerformed
        if (!(tableWorkoutRecords.getModel() instanceof ClientWorkoutRecordTableModel)) {
            return;
        }

        if (checkBoxOnlyMyRecords.isSelected()) {
            LinkedList<WorkoutRecord> onlyMyRecords = new LinkedList<>();
            for (WorkoutRecord wr : recordsOfSelectedClient) {
                if (wr.getTrainer().getIdTrаiner() == trainer.getIdTrаiner()) {
                    System.out.println("moj trening: " + wr);
                    onlyMyRecords.add(wr);
                }
            }

            fillRecordTable(onlyMyRecords);

        } else {
            fillRecordTable(recordsOfSelectedClient);
        }


    }//GEN-LAST:event_checkBoxOnlyMyRecordsActionPerformed

    private void btnClientDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientDetailsActionPerformed
        if (tblClients.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Izaberite klijenta.");
        }
        (new AddClientDialog(this, true, clientList.get(tblClients.getSelectedRow()))).setVisible(true);
        tblClients.setRowSelectionInterval(tblClients.getSelectedRow(), tblClients.getSelectedRow());

    }//GEN-LAST:event_btnClientDetailsActionPerformed

    private void btnDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecordActionPerformed
        if (((ClientWorkoutRecordTableModel) tableWorkoutRecords.getModel()).getList().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lista treninga je prazna.");
            return;
        }
        if (tableWorkoutRecords.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Izaberite trening.");
            return;
        }
        WorkoutRecord wr = ((ClientWorkoutRecordTableModel) tableWorkoutRecords.getModel()).getList().get(tableWorkoutRecords.getSelectedRow());
        if (wr.getTrainer().getIdTrаiner() != trainer.getIdTrаiner()) {
            JOptionPane.showMessageDialog(this, "Ne mozete obrisati trening koji nije odrzan kod Vas.");
            return;
        }

        if (JOptionPane.showConfirmDialog(this, "Da li ste sigurni?", "Potvrda", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                if (ClientController.getInstance().deleteWorkoutRecord(wr)) {
                    JOptionPane.showMessageDialog(this, "Uspesno brisanje treninga");
                    refreshWorkoutRecordTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Neuspesno brisanje treninga");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace();
            }

        }
    }//GEN-LAST:event_btnDeleteRecordActionPerformed

    private void btnAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRecordActionPerformed
        if (tblClients.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Morate izabrati klijenta da biste dodali trening.");
            return;
        }

        Client client = clientList.get(tblClients.getSelectedRow());

        new AddWorkoutRecordDialog(this, true, trainer, client, null).show();
        refreshWorkoutRecordTable();
    }//GEN-LAST:event_btnAddRecordActionPerformed

    private void btnRecordDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordDetailsActionPerformed
        if (((ClientWorkoutRecordTableModel) tableWorkoutRecords.getModel()).getList().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lista je prazna");
            return;
        }
        if (tableWorkoutRecords.getSelectedRow() != -1) {
            (new AddWorkoutRecordDialog(this, true, trainer, clientList.get(tblClients.getSelectedRow()), ((ClientWorkoutRecordTableModel) tableWorkoutRecords.getModel()).getList()
                    .get(tableWorkoutRecords.getSelectedRow()))).setVisible(true);
            refreshWorkoutRecordTable();

        } else
            JOptionPane.showMessageDialog(this, "Izaberite trening iz tabele.");
    }//GEN-LAST:event_btnRecordDetailsActionPerformed

    private void rbMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMaleActionPerformed

    private void btnSearchClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchClientsActionPerformed
        Client c = new Client();
        if (!txtName.getText().isBlank()) {
            c.setName(txtName.getText());
        }
        if (!txtLastName.getText().isBlank()) {
            c.setLastName(txtLastName.getText());
        }
        if (rbMale.isSelected()) {
            c.setGender(Gender.MALE);
        }
        if (rbFemale.isSelected()) {
            c.setGender(Gender.FEMALE);
        }
        if (cmbGymSearchClient.getSelectedIndex() != 0) {
            c.setGym(gymList.get(cmbGymSearchClient.getSelectedIndex()));
        }

        searchClients(c);


    }//GEN-LAST:event_btnSearchClientsActionPerformed

    private void searchClients(Client c) throws HeadlessException {
        try {
            clientList = ClientController.getInstance().searchClients(c);
            ((ClientTableModel) tblClients.getModel()).clear();
//            txtName.setText("");
//            txtLastName.setText("");
//            rbFemale.setSelected(false);
//            rbMale.setSelected(false);
//            cmbGymSearchClient.setSelectedIndex(0);
            for (Client cl : clientList) {
                ((ClientTableModel) tblClients.getModel()).add(cl);
            }
            ((ClientWorkoutRecordTableModel) tableWorkoutRecords.getModel()).clear();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void btnResetClientSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetClientSearchActionPerformed
        txtName.setText("");
        txtLastName.setText("");
        rbFemale.setSelected(false);
        rbMale.setSelected(false);
        cmbGymSearchClient.setSelectedIndex(0);
        searchClients(new Client());

    }//GEN-LAST:event_btnResetClientSearchActionPerformed

    private void btnDeleteClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteClientActionPerformed
        if (tblClients.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Izaberite klijenta iz tabele");
            return;
        }

        int choice = JOptionPane.showConfirmDialog(this, "Da li ste sigurni?\nOvo ce obrisati i svaku evidenciju treninga za izabranog klijenta.", "Potvrda", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            try {
                //obrisi klijenta
                if (ClientController.getInstance().deleteClient(clientList.get(tblClients.getSelectedRow()))) {
                    JOptionPane.showMessageDialog(this, "Uspesno brisanje klijenta.\nSve povezane evidencije su obrisane.");
                    btnSearchClients.doClick();
                } else {
                    JOptionPane.showMessageDialog(this, "Greska pri brisanju klijenta");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greska: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnDeleteClientActionPerformed

    private void btnAddClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddClientActionPerformed
        AddClientDialog acd = new AddClientDialog(this, true, null);
        acd.setVisible(true);
        acd.setLocationRelativeTo(null);
        btnSearchClients.doClick();
    }//GEN-LAST:event_btnAddClientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AccountDetailsMenuItem;
    private javax.swing.JMenuItem AddClientMenuItem;
    private javax.swing.JMenu MenuAccount;
    private javax.swing.JMenuItem MySertificatesMenuItem;
    private javax.swing.JButton btnAddClient;
    private javax.swing.JButton btnAddRecord;
    private javax.swing.JButton btnClientDetails;
    private javax.swing.JButton btnDeleteClient;
    private javax.swing.JButton btnDeleteRecord;
    private javax.swing.JButton btnRecordDetails;
    private javax.swing.JButton btnResetClientSearch;
    private javax.swing.JButton btnSearchClients;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBoxOnlyMyRecords;
    private javax.swing.JComboBox<String> cmbGymSearchClient;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JTable tableWorkoutRecords;
    private javax.swing.JTable tblClients;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void resizeFrame() {
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Rectangle bounds = env.getMaximumWindowBounds();
        System.out.println(bounds);
        this.setSize(bounds.width, bounds.height);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        this.setLocation(bounds.x, bounds.y);
    }

    private void setWindowListener() {
        try {

            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    try {
                        ClientController.getInstance().logout(trainer);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }

            });

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void fillGymComboBox(JComboBox<String> cmbGym) {
        try {
            gymList = ClientController.getInstance().getAllGym(new Gym(), "1");
            gymList.addFirst(null);
            DefaultComboBoxModel<String> cbm = new DefaultComboBoxModel<>();
            for (Gym g : gymList) {
                if (g == null) {
                    cbm.addElement("Sve teretane");
                    continue;
                }
                cbm.addElement(g.getName() + " - " + g.getAddress());
            }
            cmbGym.setModel(cbm);
            cmbGym.setSelectedIndex(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    private void fillRecordTable(LinkedList<WorkoutRecord> list) {
        ((ClientWorkoutRecordTableModel) tableWorkoutRecords.getModel()).clear();
        for (WorkoutRecord wr : list) {
            ((ClientWorkoutRecordTableModel) tableWorkoutRecords.getModel()).add(wr);
        }

    }

    private void fillClientTable() {
        try {
            clientList = ClientController.getInstance().getAllClient(new Client(), "1");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        for (Client c : clientList) {
            ((ClientTableModel) tblClients.getModel()).add(c);
        }
    }

    private void setClientTableListSelectionListener() {
        tblClients.getSelectionModel().addListSelectionListener(e -> {
            refreshWorkoutRecordTable();
        });
    }

    private void refreshWorkoutRecordTable() throws HeadlessException {
        //ucitati recorde za izabranog klijenta
        if (tblClients.getSelectedRow() == -1) {
            return;
        }
        try {
            Client client = clientList.get(tblClients.getSelectedRow());
            recordsOfSelectedClient = ClientController.getInstance().getWorkoutRecordsForClient(client);
            fillRecordTable(recordsOfSelectedClient);
            System.out.println("fetched records:");
            for (WorkoutRecord wr : recordsOfSelectedClient) {
                System.out.println(wr);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace();
        }
    }

}
